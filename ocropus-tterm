#!/usr/bin/python

import sys
sys.path = ["."]+sys.path
import pdb
from pdb import pm

import random as pyrand
from pylab import *
import tables
import ocrolib; reload(ocrolib)
from collections import Counter
import ocrolib
from ocrolib import patrec
from scipy.spatial import distance
from ocrolib.patrec import Dataset,showim,showgrid
from ocrolib.ligatures import lig

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-N','--maxtrain',type=int,default=10000000000,help="max # of training samples")
parser.add_argument('-d','--data',default="../data/uw3.h5",help="data file")
parser.add_argument('-m','--model',default="split.cmodel",help="input model to be updated")
parser.add_argument('-o','--output',default="trained.cmodel",help="output with per-leaf classifiers")
parser.add_argument('-c','--classifier',default="patrec.PriorClassifier",help="leaf classifier to be used")
parser.add_argument('-K','--keywords',default="{'prenormalized':1}",help="keywords for training (like a dictionary)")
parser.add_argument('--exclude',default=", ,_")
args = parser.parse_args()
#args = parser.parse_args([])

exclude = args.exclude.split(",")+[None]
classifier = eval(args.classifier)
keywords = eval(args.keywords)

print "loading model"
import cPickle
with open(args.model) as stream:
    sc = cPickle.load(stream)
print "got model",sc

sc.classifier.cfactory = lambda:patrec.SparseCharOutputs(patrec.LinPcaClassifier())

print "loading dataset"
h5 = tables.openFile(args.data,"r")
N = min(args.maxtrain,len(h5.root.classes))
classes = h5.root.classes[:N]
cclasses = [lig.chr(c) for c in classes]
subset = [i for i,c in enumerate(cclasses) if c not in exclude]
cclasses = [cclasses[i] for i in subset]
patches = Dataset(h5.root.patches,subset=subset)

def cclassifier():
    return patrec.SparseCharOutputs(classifier())

print "training"
sc.fit_terminals(patches,cclasses,cclassifier,**keywords)

print "writing"
import cPickle
with open(args.output,"w") as stream:
    cPickle.dump(sc,stream,2)
