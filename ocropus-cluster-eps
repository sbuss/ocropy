#!/usr/bin/python
import code,pickle,sys,os,re
from pylab import *
from optparse import OptionParser
import ocrolib
from ocrolib import dbtables

parser = OptionParser("""
usage: %prog [options] chars.db output.db

""")

parser.add_option("-D","--display",help="display chars",action="store_true")
parser.add_option("-v","--verbose",help="verbose output",action="store_true")
parser.add_option("-t","--table",help="table name",default="chars")
parser.add_option("-e","--epsilon",help="epsilon",type=float,default=0.1)
parser.add_option("-o","--overwrite",help="overwrite output if it exists",action="store_true")

class FastCluster:
    def __init__(self,eps=0.05):
        self.eps = eps
        self.ex = ocrolib.ScaledFE()
        self.dc = ocrolib.EdistComp()
        self.classes = []
        self.counts = []
        self.total = 0
    def add(self,c,cls=None):
        self.total += 1
        c /= sqrt(sum(c**2))
        v = self.ex.extract(c)
        i = self.dc.find(v,self.eps)
        if i<0:
            self.dc.add(v)
            self.classes.append({cls:1})
            self.counts.append(1)
            return len(self.counts)-1
        else:
            self.classes[i][cls] = self.classes[i].get(cls,0)+1
            self.counts[i] += 1
            self.dc.merge(i,v,1.0/self.counts[i])
            return i
    def biniter(self):
        for i in range(self.dc.length()):
            key = ""
            v = self.dc.vector(i)
            count = self.dc.counts(i)
            yield i,v,count,key
    def cls(self,i):
        classes = list(self.classes[i].items())
        classes.sort(reverse=1,key=lambda x:x[1])
        # print i,self.classes[i],classes
        return classes[0]
    def stats(self):
        return " ".join([str(self.total),str(self.dc.length())])
    def save(self,file):
        table = dbtables.ClusterTable(file)
        table.create(image="blob",cls="text",count="integer",classes="text",cluster="integer")
        table.converter("image",dbtables.SmallImage())
        for i,v,count,key in self.biniter():
            image = array(v/amax(v)*255.0,'B')
            image.shape = (30,30)
            cls,count = self.cls(i)
            classes = repr(self.classes[i])
            table.set(image=image,cls=cls,count=count,classes=classes,cluster=i)

(options,args) = parser.parse_args()

if len(args)!=2:
    parser.print_help()
    sys.exit(0)

input = args[0]
output = args[1]
if os.path.exists(output):
    if not options.overwrite:
        sys.stderr.write("%s: already exists\n"%output)
        sys.exit(1)
    else:
        os.unlink(output)

ion()
show()

# open the relevant tables

table = dbtables.Table(input,options.table)
table.converter("image",dbtables.SmallImage())
table.create(image="blob",cluster="integer",cls="integer")

binned = FastCluster(options.epsilon)
total = 0
for row in table.get():
    # get the image and the class out of the record
    raw = row.image
    cls = row.cls

    # don't store images that are too large
    if raw.shape[0]>255 or raw.shape[1]>255: continue

    # make sure the maximum is 1.0
    raw = raw/float(amax(raw))

    # add it to the binned clusterer
    cluster = binned.add(raw,cls)

    # measure and report progress
    total+=1
    if total%1000==0: 
        print "#",total,"chars",binned.stats()

    # record which cluster the character was assigned to
    table.execute("update chars set cluster=? where id=?",[cluster,row.id])

table.commit()
table.close()

# FIXME optionally perform k-means clustering here so that we can do 
# everything in one step and keep the cluster labels updated more easily

# save the clustered data
print "#",binned.stats()
binned.save(output)
