#!/usr/bin/python
import code,pickle,sys,os,signal,re
from pylab import *
from optparse import OptionParser
import ocrolib
from ocrolib import dbtables
from scipy.ndimage import measurements

signal.signal(signal.SIGINT,lambda s,f:sys.exit(1))

parser = OptionParser()
parser.add_option("-o","--output",help="output file",default="chars.db")
parser.add_option("-d","--display",help="display characters")
parser.add_option("-v","--verbose",help="verbose output")
parser.add_option("-m","--minsize",help="minimum component width and height",type="int",default=8)
parser.add_option("-a","--absolute",help="output absolute images",action="store_true")
parser.add_option("-s","--segmenter",help="segmenter",default="SegmentLineByGCCS")
parser.add_option("-N","--nosource",help="do not record source info",action="store_true")
#parser.add_option("-r","--raw",help="output unsegmented",action="store_true",default=True)
#parser.add_option("-a","--maxage",help="output missegmented",default=10000000,type="int")
(options,args) = parser.parse_args()

if len(args)<1:
    parser.print_help()
    sys.exit(0)

segmenter = ocrolib.make_ISegmentLine(options.segmenter)

try:
    segmenter.pset("swidth",0)
    segmenter.pset("sheight",30)
except:
    pass

grouper = ocrolib.StandardGrouper(maxrange=1,maxdist=1)

table = dbtables.Table(options.output,"chars")
table.converter("image",dbtables.SmallImage())
table.create(image="blob",count="integer",cls="text",classes="text",key="text",
             file="text",bbox="text",cluster="integer",lgeo="text")

ion()
show()

def seg_boxes(seg,math=0):
    seg = array(seg,'i')
    slices = measurements.find_objects(seg)
    h = seg.shape[0]
    result = []
    for ys,xs in slices:
        if math:
            result += [(h-ys.stop-1,h-ys.start-1,xs.start,xs.stop)]
        else:
            result += [(ys.start,ys.stop,xs.start,xs.stop)]
    return result

def avg(*args):
    return mean(args)

from scipy import stats

def seg_geometry(segmentation):
    boxes = seg_boxes(segmentation,math=1)
    heights = [(y1-y0) for (y0,y1,x0,x1) in boxes]
    mh = stats.scoreatpercentile(heights,per=50)
    centers = [(avg(y0,y1),avg(x0,x1)) for (y0,y1,x0,x1) in boxes]
    xs = [x for y,x in centers]
    ys = [y for y,x in centers]
    a,b = polyfit(xs,ys,1)
    return mh,a,b

def chars(files):
    for file in files:
        print "# loading",file
        binfile = re.sub(r'.png','.bin.png',file)
        if os.path.exists(binfile):
            image = ocrolib.read_image_gray(binfile)
        else:
            image = ocrolib.read_image_gray(file)
        try:
            segmentation = segmenter.charseg(image)
        except:
            print "# segmentation failed"
            continue
        geo = seg_geometry(segmentation)
        grouper.setSegmentation(segmentation)
        image = 255-image
        if options.display:
            clf(); gray(); imshow(image); draw()
        for i in range(grouper.length()):
            cls = None
            raw,mask = grouper.extractWithMask(image,i,1)
            yield raw,mask,cls,file,grouper.bboxMath(i),geo

total = 0
for raw,mask,cls,file,bbox,geo in chars(args):
    clf()
    if raw.shape[0]>255 or raw.shape[1]>255: continue
    if raw.shape[0]<options.minsize or raw.shape[1]<options.minsize: continue
    if 0 and options.display:
        print amin(raw),amax(raw)
        clf(); gray(); imshow(raw); draw()
    table.set(image=raw,cls="_",count=1,file=file,bbox="%g %g %g %g"%bbox,cluster=-1,lgeo="%g %g %g"%geo)
    total += 1
    if total%10000==0: table.commit()

table.commit()
