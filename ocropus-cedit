#!/usr/bin/env python

from optparse import OptionParser
import pygtk
pygtk.require("2.0") 
import gobject,gtk,gtk.glade
import sys,pickle,os,glob
import scipy
from pylab import *
import ocropy
from ocropy import N,NI,F,FI
from ocropy import dbtables

def TODO():
    print """
    accept-selection button (turns everything else to _)
    redo-selection button (turns selection to _)
    reject-selection button (turns selection to #)
    misseg-selection button (turns selection to ~)
    cluster-classifier using output of manual classification
    get rid of bogus binnednn loading message
    special chars: #=reject, _=unclassified, ~=missegmentation
    put confidence into database and display
    nnet+exception
    centering on largest component only
    sort by size, similarity, frequency
    """

parser = OptionParser(usage="""
%prog [options] [input.db]

Trains models based on a cluster database.
""")
parser.add_option("-m","--model",help="model used for classification",default="default.cmodel")
parser.add_option("-v","--verbose",help="verbose",action="store_true")
parser.add_option("-t","--table",help="which table to edit",default="clusters")
# use this with old (unflipped) cmodels trained from Python
parser.add_option("-f","--flip",help="flip characters before handing to classifier",default=1,action="store_false")
(options,args) = parser.parse_args()

ion()

### misc utility functions

def detuple(item):
    """Return the first non-list/tuple element of the
    argument, recursively."""
    while 1:
        if type(item) is tuple:
            item = item[0]
            continue
        if type(item) is list:
            item = item[0]
            continue
        return item

def numpy2pixbuf(a,limit=40):
    """Convert a numpy array to a pixbuf."""
    r = max(a.shape)
    scaled = 0
    if r>limit:
        a = array(a,'f')
        a = scipy.ndimage.interpolation.zoom(a,limit/float(r),order=1)
        scaled = 1
    data = zeros(list(a.shape)+[3],'B')
    data[:,:,0] = 255*a
    data[:,:,1] = 255*a
    data[:,:,2] = 255*a
    if scaled:
        data[:3,:3,:] = 0
        data[:3,:3,1] = 255
    return gtk.gdk.pixbuf_new_from_array(data,gtk.gdk.COLORSPACE_RGB,8)

### load the cluster images

print "opening table"
file = "clusters.db"
if len(args)>0: file = args[0]
table = dbtables.Table(file,options.table)
table.converter("image",dbtables.SmallImage())
print "done"

def get_clusters(cls):
    print "get_clusters",cls
    clusters = list(table.get(cls=cls))
    clusters.sort(key=lambda x:x.count,reverse=1)
    for cluster in clusters:
        if cluster.cls is None:
            cluster.cls = "_"
        cluster.image = cluster.image/255.0
    print "got",len(clusters),"clusters"
    return clusters

def get_classes():
    return list(table.get_keys("cls"))

def compute_combolist():
    """Compute the combolist from the current charlist."""
    global charlist,combolist
    select = class_selector.get_active_text()
    charlist = sorted(get_classes())
    charlist = ["_"]+charlist
    combolist = gtk.ListStore(str)
    for char in charlist:
        combolist.append([char])
    class_selector.set_model(combolist)
    class_selector.set_text_column(0)
    if select in charlist:
        which = charlist.index(select)
        class_selector.set_active(which)

def set_store(target_cls,sortfun=None):
    """Set the store for the target class."""
    global grid
    grid = gtk.ListStore(gtk.gdk.Pixbuf,
                         str,
                         gobject.TYPE_PYOBJECT)
    rownum = 0
    selected = get_clusters(cls=target_cls)
    if sortfun is not None:
        selected = sortfun(selected)
    for cluster in selected:
        pixbuf = numpy2pixbuf(1.0-cluster.image)
        row = [pixbuf,cluster.cls,cluster]
        grid.append(row)
        rownum += 1
    cluster_viewer.set_model(grid)
    move_to(0)

def move_to(index):
    """Move to the given index in the current view."""
    index = detuple(index)
    cluster_viewer.set_cursor(index)
    cluster_viewer.select_path(index)
    update_info()

def update_info():
    """Update the character information associated with the currently
    selected character."""
    index = cluster_viewer.get_cursor()
    if index is None: return
    index = index[0][0]
    row = grid[index]
    info_area.set_text(str(row[2].classes)+" "+str(row[2].count))

def get_extended():
    """Get a string from a dialog box, used for extended labels."""
    dialog = gtk.MessageDialog(
        None,
        gtk.DIALOG_MODAL|gtk.DIALOG_DESTROY_WITH_PARENT,
        gtk.MESSAGE_QUESTION,
        gtk.BUTTONS_OK,
        None)
    dialog.set_markup("Transcript:")
    entry = gtk.Entry()
    entry.connect("activate",
                  lambda e,d,r: d.response(r),
                  dialog,gtk.RESPONSE_OK)
    dialog.vbox.pack_end(entry,True,True,0)
    dialog.show_all()
    dialog.run()
    text = entry.get_text()
    dialog.destroy()
    return text

def set_dist(x,s):
    assert type(x)==ndarray,x
    assert type(s[0])==ndarray,s[0]
    minerr = 10000
    for y in s:
        if x.shape!=y.shape: continue
        xt = x
        err,rerr,_ = binnednn.symdist(xt,y)
        minerr = min(err,minerr)
    return minerr

### toolbar commands

def cmd_freq(*args):
    """Sort by frequency."""
    global grid,cluster_viewer
    assert type(grid)==gtk.ListStore
    dists = [x[2].count for x in grid]
    index = array(argsort(-array(dists)))
    index = [int(i) for i in index]
    grid.reorder(index)
    cluster_viewer.unselect_all()
    cluster_viewer.scroll_to_path(1,1.0,0.0,0.0)

def cmd_similar(*args):
    """Sort by similarity to the selected item."""
    global grid,cluster_viewer
    assert type(grid)==gtk.ListStore
    if 0:
        selected = [grid[i][2].image for i in cluster_viewer.get_selected_items()]
        dists = [set_dist(x[2].image,selected) for x in grid]
    else:
        selected = [ocropy.stdsize(grid[i][2].image) for i in cluster_viewer.get_selected_items()]
        dists = [set_dist(ocropy.stdsize(x[2].image),selected) for x in grid]
    index = array(argsort(dists))
    index = [int(i) for i in index]
    grid.reorder(index)
    cluster_viewer.unselect_all()
    cluster_viewer.scroll_to_path(1,1,0,0)
    return 1

classifier = None

def load_classifier(which=options.model):
    global classifier
    try:
        classifier = ocropy.load_IModel(which)
        classifier.info()
        classifier.getExtractor().info()
        print "loaded classifier",which
    except:
        print "loading",options.model,"failed"
        classifier = None

load_classifier()

def cmd_sel_class(item,which):
    if item.get_active():
        print "activated class",item,which
        load_classifier(which)

confidence = None

def load_confidence(which=options.model):
    global confidence
    try:
        confidence = ocropy.load_IModel(which)
        confidence.info()
        confidence.getExtractor().info()
        print "loaded confidence",which
    except:
        print "loading",options.model,"failed"
        confidence = None

load_confidence()

def cmd_sel_conf(item,which):
    if item.get_active():
        print "activated conf",item,which
        load_confidence(which)

def cmd_nn(*args):
    """Classify with the selected classifier."""
    global grid,cluster_viewer
    assert type(grid)==gtk.ListStore
    count = 0
    for i in cluster_viewer.get_selected_items():
        row = grid[i]
        pat = row[2]
        image = FI(pat.image)
        outputs = classifier.coutputs(image)
        outputs = [(x[0],-log(x[1])) for x in outputs]
        outputs.sort(key=lambda x:x[1])
        if len(outputs)<1:
            pat.cls = ""
        else:
            cls,cost = outputs[0]
            row[1] = cls
            row[2].cls = cls
            table.put(row[2],commit=0)
        if count<10 or count%100==0:
            if len(outputs)>1:
                print count,row[2].cls,outputs[0]
            else:
                print count,"no output"
        count += 1
    table.commit()
    return 1

def cmd_class(*args):
    """Highlight misclassified samples and sort by classifier confidence."""
    global grid,cluster_viewer,confidence
    assert type(grid)==gtk.ListStore
    cluster_viewer.unselect_all()
    dists = []
    for i in range(len(grid)):
        row = grid[i]
        image = FI(row[2].image)
        outputs = confidence.coutputs(image)
        outputs = [(x[0],-log(x[1])) for x in outputs]
        outputs.sort(key=lambda x:x[1])
        if len(outputs)<1: continue
        cls,cost = outputs[0]
        if row[2].cls!=cls:
            cluster_viewer.select_path(i)
        pcost = 9999
        for cls,cost in outputs:
            if cls==row[2].cls:
                pcost = cost
                break
        dists.append(pcost)
        if i<10 or i%1000==0:
            print i,row[2].cls,outputs[0],pcost
    index = argsort(-array(dists))
    index = [int(i) for i in index]
    grid.reorder(index)
    # cluster_viewer.unselect_all()
    cluster_viewer.scroll_to_path(1,1,0,0)
    return 1

def cmd_train(*args):
    return 1

### basic event handlers

def on_comboboxentry1_changed(entry):
    s = entry.get_active_text()
    if s is not None and s!="":
        set_store(s)

def on_iconview1_item_activated(*args):
    update_info()

def on_iconview1_motion_notify_event(widget,event):
    # item = widget.get_item_at_pos(event.x,event.y)
    # if item is not None: move_to(item[0])
    return 0

def on_iconview1_button_press_event(widget,event):
    if event.button==1: return 0
    if event.button==2:
        item = widget.get_item_at_pos(event.x,event.y)
        if item is not None: 
            s = "_"
            item = detuple(item)
            move_to(item)
            row = grid[item]
            row[1] = s
            row[2].cls = s
            table.put(row[2])

def on_iconview1_key_press_event(widget,event):
    item = cluster_viewer.get_cursor()
    # print item,event.string
    if event.string in ["\027"]: # ^W
        i = class_selector.get_active()
        if i<=0: return 1
        class_selector.set_active(i-1)
        update_info()
        return 1
    if event.string in ["\032"]: # ^Z
        i = class_selector.get_active()
        if i<0: i = 0
        if i>=len(combolist)-1: return 1  # it's one longer than the number of entries
        class_selector.set_active(i+1)
        update_info()
        return 1
    if event.string=="\022": # ^R = reload
        compute_combolist()
        return 1
    if event.string>=" " or event.string=="\004":
        last = -1
        s = event.string
        if s==".":
            s = get_extended()
        else:
            if s in ["\004"]: s = ""
            if s in [" "]: s = "~"
        items = cluster_viewer.get_selected_items()
        if items==[]:
            items = [widget.get_cursor()[0][0]]
        for item in items:
            item = detuple(item)
            if item>last: last = item
            row = grid[item]
            row[1] = s
            row[2].cls = s
            table.put(row[2],commit=0)
        table.commit()
        cluster_viewer.unselect_all()
        move_to(last+1)
        return 1
    return 0




def classifier_menu(cmd):
    menu = gtk.Menu()
    group = None
    activated = 0
    models = glob.glob("*.cmodel")
    try:
        modeldir = ocropy.finddir("models")
        models += glob.glob(modeldir+"/*.cmodel")
    except IOError:
        pass
    for model in models:
        item = gtk.RadioMenuItem(group=group,label=model)
        if "default" in model:
            item.activate()
            activated = 1
        group = item
        item.connect("toggled",cmd,model)
        menu.append(item)
    if not activated: 
        item.activate() # activate the last one if there is no default
    return menu

def build_toolbar():
    global toolbar
    toolbar = main_widget_tree.get_widget("toolbar")
    toolbar.set_style(gtk.TOOLBAR_BOTH)
    button = gtk.ToolButton(label="Freq")
    button.connect("clicked",cmd_freq)
    toolbar.insert(button,-1)
    button = gtk.ToolButton(label="Similar")
    button.connect("clicked",cmd_similar)
    toolbar.insert(button,-1)
    
    # create a classify button
    classify_button = gtk.MenuToolButton(None,"Classify")
    classify_menu = classifier_menu(cmd_sel_class)
    classify_button.set_menu(classify_menu)
    classify_menu.show_all()
    classify_button.show_all()
    classify_button.connect("clicked",cmd_nn)
    toolbar.insert(classify_button,-1)

    conf_button = gtk.MenuToolButton(None,"Confidence")
    conf_menu = classifier_menu(cmd_sel_conf)
    conf_button.set_menu(conf_menu)
    conf_menu.show_all()
    conf_button.show_all()
    conf_button.connect("clicked",cmd_class)
    toolbar.insert(conf_button,-1)
    
    train_button = gtk.ToolButton(label="Train")
    train_button.connect("clicked",cmd_train)
    toolbar.insert(train_button,-1)

def main():
    global main_widget_tree,class_selector,cluster_viewer,info_area
    gladefile = ocropy.findfile("gui/ocropus-cedit.glade")
    windowname = "window1" 
    main_widget_tree = gtk.glade.XML(gladefile)
    dic = {
        "on_window1_destroy_event" : gtk.main_quit,
        "on_window1_delete_event" : gtk.main_quit,
        "on_iconview1_key_press_event" : on_iconview1_key_press_event,
        "on_iconview1_button_press_event" : on_iconview1_button_press_event,
        "on_iconview1_item_activated" : on_iconview1_item_activated,
        "on_iconview1_selection_changed" : on_iconview1_item_activated,
        "on_iconview1_motion_notify_event" : on_iconview1_motion_notify_event,
        "on_comboboxentry1_changed" : on_comboboxentry1_changed,
        }
    main_widget_tree.signal_autoconnect(dic)
    window = main_widget_tree.get_widget("window1")
    build_toolbar()

    graphview = main_widget_tree.get_widget("scrolledwindow1") 
    cluster_viewer = main_widget_tree.get_widget("iconview1")
    cluster_viewer.set_selection_mode(gtk.SELECTION_MULTIPLE)
    class_selector = main_widget_tree.get_widget("comboboxentry1")
    info_area = main_widget_tree.get_widget("info")
    cluster_viewer.set_item_width(50)
    cluster_viewer.set_pixbuf_column(0)
    cluster_viewer.set_text_column(1)
    assert cluster_viewer is not None
    graphview.show_all()
    cluster_viewer.show_all()

    compute_combolist()
    # class_selector.set_active(0)

    status = main_widget_tree.get_widget("status")
    main_widget_tree.get_widget("window1").show_all()
    gtk.main()

main()
