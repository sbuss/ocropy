#!/usr/bin/python

import matplotlib
matplotlib.rcParams["interactive"] = 1
matplotlib.use('TkAgg') # Qt4Agg
from pylab import *

import resource 
resource.setrlimit(resource.RLIMIT_DATA,(2e9,2e9))

import sys,os,re,glob
import ocropy
from ocropy import NI,plotutils,simpleti

ion()
hold(False)

def alert(*args):
    sys.stderr.write(" ".join([str(x) for x in args]))
    sys.stderr.write("\n")

from optparse import OptionParser
prefix = "/usr/local/share/ocropus/models/"
parser = OptionParser(usage="""
%prog [options] image.png ...

Recognize pages using built-in OCRopus components.  This first
uses the page cleaner, then the page segmenter, then the line
recognizers, and finally the language model.
""")
parser.add_option("-C","--clean",help="page cleaner",default="StandardPreprocessing")
parser.add_option("-P","--pseg",help="line segmenter",default="SegmentPageByRAST")
parser.add_option("-T","--ticlass",help="text image segmenter",default=None)
parser.add_option("-m","--linerec",help="linerec model",default=prefix+"default.model")
parser.add_option("-l","--langmod",help="langmod",default=prefix+"default.fst")
parser.add_option("-v","--verbose",help="verbose",action="store_true")
parser.add_option("-x","--hocr",help="output XHTML+hOCR",action="store_true")
parser.add_option("-p","--plain",help="output plain text",action="store_true")
parser.add_option("-r","--dpi",help="resolution in dpi",default=200,type=int)
parser.add_option("-S","--silent",action="store_true",help="disable warnings")
parser.add_option("-d","--display",help="display result",action="store_true")
parser.add_option("-D","--Display",help="display continuously",action="store_true")
parser.add_option("-L","--displaylines",help="display lines as well",action="store_true")
(options,args) = parser.parse_args()

if options.Display: options.display = 1
if options.display: ion()
if options.displaylines:
    sys.stderr.write("[note] recognizer runs significantly slower with -L flag (line display)\n")

preproc = ocropy.make_IBinarize(options.clean)
segmenter = ocropy.make_ISegmentPage(options.pseg)
# linerec = ocropy.load_IRecognizeLine(options.linerec)
linerec = ocropy.load_linerec(options.linerec)
lmodel = ocropy.make_OcroFST()
lmodel.load(options.langmod)
ticlass = None
if options.ticlass is not None:
    ticlass = ocropy.make_ITextImageClassification(options.ticlass)

def blackout_images(image,ticlass):
    rgb = ocropy.intarray()
    ticlass.textImageProbabilities(rgb,image)
    r = ocropy.bytearray()
    g = ocropy.bytearray()
    b = ocropy.bytearray()
    ocropy.unpack_rgb(r,g,b,rgb)
    components = ocropy.intarray()
    components.copy(g)
    n = ocropy.label_components(components)
    print "[note] number of image regions",n
    tirects = ocropy.rectarray()
    ocropy.bounding_boxes(tirects,components)
    for i in range(1,tirects.length()):
        r = tirects.at(i)
        ocropy.fill_rect(image,r,0)
        r.pad_by(-5,-5)
        ocropy.fill_rect(image,r,255)
        

header = """
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>OCR Results</title>
<meta name="Description" content="OCRopus Output" />
</head>
<body>
"""
footer = """
</body>
</html>
"""

if options.hocr: print header

pageno = 0
for page_gray,pagefile in ocropy.page_iterator(args):
    pageno += 1
    sys.stderr.write("[note] *** %d %s ***\n"%(pageno,pagefile))

    if options.hocr: # add: bbox, ppageno
        print "<div class='ocr_page' id='page_%d' ppageno='%d' image='%s'>"% \
            (pageno,pageno,pagefile)

    page_bin = ocropy.bytearray()
    preproc.binarize(page_bin,page_gray)

    if not options.silent:
        if ocropy.quick_check_page_components(page_bin,dpi=options.dpi)<0.5:
            continue

    if ticlass is not None:
        blackout_images(page_bin,ticlass)

    page_seg = ocropy.intarray()
    segmenter.segment(page_seg,page_bin)

    if options.display: 
        clf()
        axis = subplot(111)
        axis.imshow(NI(page_bin),cmap=cm.gray)
        plotutils.draw_pseg(page_seg,axis)
        draw()
        if not options.Display: 
            raw_input("hit ENTER to continue")
        else:
            ginput(1,timeout=0.1)

    regions = ocropy.RegionExtractor()
    regions.setPageLines(page_seg)
    if regions.length()>100:
        alert("[error] too many lines (%d), probably bad input; skipping"%regions.length())
        continue
    alert("[note]",pagefile,"lines:",regions.length())
    for i in range(1,regions.length()):
        line = ocropy.bytearray()
        regions.extract(line,page_bin,i,1) # might use page_gray
        if options.display and options.displaylines:
            clf(); subplot(111); imshow(NI(line),cmap=cm.gray); ginput(1,timeout=0.1)
        fst = ocropy.make_OcroFST()
        rseg = ocropy.intarray()
        if not options.silent:
            if ocropy.quick_check_line_components(line,dpi=options.dpi)<0.5:
                continue
        try:
            linerec.recognizeLine(rseg,fst,line)
        except:
            continue
        s = ocropy.ustrg()
        cost = ocropy.beam_search(s,fst,lmodel,10000)
        if options.hocr:
            print "<span class='ocr_line' bbox='%d %d %d %d'>%s</span>"%\
                (regions.x0(i),regions.y0(i),regions.x1(i),regions.y1(i),\
                 ocropy.ustrg_as_string(s))
        elif options.plain:
            print ocropy.ustrg_as_string(s)
        else:
            print "%6.2f\t%3d\t%s"%(cost,s.length(),ocropy.ustrg_as_string(s))
        if options.display and options.displaylines:
            clf()
            axis = subplot(111)
            plotutils.draw_linerec(line,fst,rseg,lmodel,axis)
            if not options.Display: 
                raw_input("hit ENTER to continue")
            else:
                ginput(1,timeout=0.1)
    if options.hocr:
        print "</div>"

if options.hocr: print footer
