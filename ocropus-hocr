#!/usr/bin/python

# FIXME use argparse

import __builtin__ as python
import sys,os,re,optparse,shutil,glob
import matplotlib
if "DISPLAY" not in os.environ: matplotlib.use("AGG")
else: matplotlib.use("GTK")
import signal
signal.signal(signal.SIGINT,lambda *args:sys.exit(1))
from matplotlib import patches
from pylab import *
from scipy.stats.stats import trim1

from scipy.ndimage import measurements
from scipy.misc import imsave
from PIL import Image
import ocrolib
from ocrolib import hocr

def E(*args):
    args = [str(x) for x in args]
    sys.stderr.write(" ".join(args))
    sys.stderr.write("\n")
def P(*args):
    print "".join(args)
def PN(*args):
    print "".join(args),

parser = optparse.OptionParser(usage="""
%prog [options] book/????.bin.png

Puts together the result of OCR steps into an XHTML output file
for the given set of input files.  This relies on the standard
OCRopus naming conventions for page and line images as produced
by the other command line tools.

book/0001.bin.png            # page image
book/0001.pseg.png           # page segmentation
book/0001/010001.txt         # recognizer output for lines
book/0001/010001.cseg.png    # character segmentation for lines

etc.
""")
parser.add_option("-b","--breaks",action="store_true",help="output line breaks")
parser.add_option("-p","--nopars",action="store_true",help="don't output paragraphs")
parser.add_option("-s","--fscale",type=float,default=1.0,help="scale factor for translating xheights into font size (use 0 to disable)")
options,args = parser.parse_args()
args = ocrolib.glob_all(args)

median_xheight = None
dirs = [ocrolib.allsplitext(name)[0] for name in args]
xhfiles = python.sum([glob.glob(d+"/??????.xheight") for d in dirs],[])
E(xhfiles)
if len(xhfiles)>5:
    xheights = [float(ocrolib.read_text(f)) for f in xhfiles]
    median_xheight = median(xheights)
E("median_xheight",median_xheight)

P(hocr.header())

last_coords = None

for arg in args:
    base,_ = ocrolib.allsplitext(arg)
    try:
        P("<div class='ocr_page' title='file %s'>"%arg)
        if not os.path.exists(base+".pseg.png"):
            E("%s: no such file"%(base+".pseg.png",))
            continue
        if not os.path.isdir(base):
            E("%s: no such directory"%base)
            continue
        pseg = ocrolib.read_page_segmentation(base+".pseg.png")
        regions = ocrolib.RegionExtractor()
        regions.setPageLines(pseg)
        for i in range(1,regions.length()):
            id = regions.id(i)
            y0,x0,y1,x1 = regions.bboxMath(i)
            if last_coords is not None:
                lx0,ly0 = last_coords
                dx,dy = x0-lx0,y1-ly0
                par = 0
                if dy>0: 
                    par = 0 # column break... moving upwards
                else:
                    if median_xheight is not None:
                        if abs(dy)>5*median_xheight: par = 1 # whitespace separator
                        if dx>2*median_xheight: par = 1 # indented paragraph
                        if abs(dx)>10*median_xheight: par = 1 # something else
                if par and not options.nopars: P("<p />")
            last_coords = (x0,y0)
            lbase = "%s/%06x"%(base,id)
            style = ""
            if not os.path.exists(lbase+".txt"):
                E("note: line %s produced no output (it may not have contained text)"%(lbase+".bin.png"))
                continue
            if median_xheight is not None and os.path.exists(lbase+".xheight"):
                xheight = float(ocrolib.read_text(lbase+".xheight"))
                perc = int(clip(xheight*100.0/median_xheight,30,300))
                perc = 10*((perc+5)//10)
                if perc!=100:
                    style += "font-size:%d%%;"%perc
            with open(lbase+".txt") as stream:
                text = stream.read()
            if 0:
                ion(); gray()
                subplot(211); imshow(regions.mask(i))
                r0,c0,r1,c1 = regions.bbox(i)
                print r0,c0
                subplot(212); imshow(pseg[r0:r1,c0:c1])
                ginput(1,1000)
            text = re.sub(r'\&','\&amp;',text)
            text = re.sub(r'\<','\&lt;',text)
            PN("<span")
            if style!="": PN(" style='"+style+"'")
            PN(" class='ocr_line' title='bbox %d %d %d %d'>"%(x0,y0,x1,y1),text,"</span>")
            if options.breaks: P("<br />")
            else: P()
    finally:
        P("</div>")

P(hocr.footer())
