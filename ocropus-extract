#!/usr/bin/python
import code,pickle,sys,os,re
from optparse import OptionParser
from pylab import *
import ocrolib
from ocrolib import dbtables
from ocrolib import Record

parser = OptionParser("""
usage: %prog [options] .../.../010001.png ...

Extract character images from OCR output and store them in a database file.  
This assume that for each line.png, there is a line.cseg.gt.png and line.gt.txt file.
""")

parser.add_option("-o","--output",help="output file",default="chars.db")
parser.add_option("-u","--unmerged",help="unmerged output file",default=None)
parser.add_option("-n","--nomissegmented",help="output no missegmented characters",action="store_true")
parser.add_option("-r","--raw",help="output unlabeled characters",action="store_true")
parser.add_option("-a","--maxage",help="output missegmented",default=10000000,type="int")
parser.add_option("-D","--display",help="display chars",action="store_true")
parser.add_option("-v","--verbose",help="verbose output",action="store_true")
parser.add_option("-N","--nosource",help="do not record source info",action="store_true")
parser.add_option("-c","--cerrors",help="continue even if errors are found",action="store_true")

(options,args) = parser.parse_args()

if len(args)<1:
    parser.print_help()
    sys.exit(0)

ion()
show()

if os.path.exists(options.output):
    print options.output,"exists; please remove"
    sys.exit(1)

table = dbtables.Table(options.output,"chars")
table.converter("image",dbtables.SmallImage())
table.create(image="blob",cls="text",file="text",segid="integer",bbox="text",count="integer",classes="text")

class BadGroundTruth(Exception):
    pass

def cseg_chars(file,suffix=".gt"):
    image = ocrolib.read_image_gray(file)
    image = 255-image
    base,_ = ocrolib.allsplitext(file)
    cseg = ocrolib.read_line_segmentation(base+".cseg"+suffix+".png")
    with open(base+suffix+".txt") as stream:
        gt = stream.read()
    gt = re.sub('\n','',gt)
    grouper = ocrolib.StandardGrouper()
    grouper.pset("maxrange",1)
    grouper.setSegmentation(cseg)
    # print grouper.length(),len(gt),len(re.sub(' ','',gt))
    if len(gt)!=grouper.length():
        gt = re.sub(' ','',gt)
        if len(gt)!=grouper.length():
            raise BadGroundTruth()
    for i in range(grouper.length()):
        cls = gt[i]
        if cls==' ': continue
        raw,mask = grouper.extractWithMask(image,i,1)
        yield Record(raw=raw,mask=mask,cls=cls,index=i,bbox=grouper.boundingBox(i),bbox_m=grouper.bboxMath(i))

def cseg_chars_all(file,suffix=".gt"):
    image = ocrolib.read_image_gray(file)
    image = 255-image
    base,_ = ocrolib.allsplitext(file)
    cseg = ocrolib.read_line_segmentation(base+".cseg"+suffix+".png")
    rseg = ocrolib.read_line_segmentation(base+".rseg"+suffix+".png")
    with open(base+suffix+".txt") as stream:
        gt = stream.read()
    gt = re.sub('\n','',gt)
    grouper = ocrolib.StandardGrouper()
    grouper.setSegmentationAndGt(rseg,cseg,gt)
    for i in range(grouper.length()):
        cls = grouper.getGtClass(i)
        if cls==' ': continue
        raw,mask = grouper.extractWithMask(image,i,1)
        yield Record(raw=raw,mask=mask,cls=cls,index=grouper.getGtIndex(i),bbox=grouper.boundingBox(i),bbox_m=grouper.bboxMath(i))

ntried = 0
nfiles = 0
total = 0
for file in args:
    segments = []
    text = ""
    ntried += 1
    try:
        if options.nomissegmented:
            items = list(cseg_chars(file))
        else:
            items = list(cseg_chars_all(file))
        nfiles += 1
    except IOError,e:
        print "ERROR",e
        print "# cseg for",file,"not found (got %d of %d files)"%(nfiles,ntried)
        continue
    except Exception,e:
        if options.cerrors:
            print "#",file,"failed",e
            continue
        else:
            raise e
    if options.verbose:
        print file,len(segments),len(text)
    index = 0
    for x in items:
        raw = x.raw
        mask = x.mask
        cls = x.cls
        # print index,cls
        index += 1
        segments.append(raw)
        if options.display:
            clf(); gray(); imshow(raw); draw()
        text += cls
        if cls is None:
            # no ground truth
            if not options.raw: continue
            cls = "_"
        elif cls<=0 or cls=="":
            # missegmented
            if not options.missegmented: continue
            cls = "~"
        if raw.shape[0]>255 or raw.shape[1]>255: continue
        raw = raw/float(amax(raw))
        key = re.sub(r'^.*/(\d\d\d\d/)','\\1',file)
        key = re.sub(r'\.png$','',key)
        if options.verbose:
            print key,cls,raw.shape
        if options.nosource:
            id = table.set(image=raw,cls=cls,count=1)
        else:
            r = x.bbox_m
            id = table.set(image=raw,cls=cls,count=1,
                           file=file,
                           bbox="%d %d %d %d"%r)
        total+=1
        if total%10000==0:
            print total,"chars"
            table.commit()

table.commit()
print total,"chars"
