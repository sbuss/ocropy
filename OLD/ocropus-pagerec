#!/usr/bin/python

import signal
signal.signal(signal.SIGINT,lambda *args:sys.exit(1))
from pylab import *
import sys,os,re,ocropy,optparse
from ocropy import N,NI
from scipy.ndimage import measurements
from scipy.misc import imsave
from PIL import Image

parser = optparse.OptionParser(usage="""
""")
options,args = parser.parse_args()

binarizer = ocropy.make_IBinarize("StandardPreprocessing")
model = ocropy.load_IModel("isolated-big.cmodel")

sizes = {}

for image,arg in ocropy.page_iterator(args):

    w = image.dim(0)
    h = image.dim(1)

    bin = ocropy.bytearray()
    gray = ocropy.bytearray()
    binarizer.binarize(bin,gray,image)
    ocropy.sub(ocropy.max(bin),bin)

    components = ocropy.intarray()
    components.copy(bin)
    n = ocropy.label_components(components)
    print "got",n,"components"
    bboxes = ocropy.rectarray()
    ocropy.bounding_boxes(bboxes,components)

    clf()
    axis = subplot(111)
    axis.imshow(NI(bin),cmap=cm.gray)

    costs = ocropy.floatarray(image.dim(0),image.dim(1))
    costs.fill(0.0)

    char = ocropy.floatarray()
    maxcost = 20.0
    ocropy.fill_rect(costs,0,0,3,3,maxcost)
    for i in range(1,bboxes.length()):
        r = bboxes.at(i)
        rw = r.width()
        rh = r.height()
        if rw>10 and rw<50 and rh>10 and rh<50:
            ocropy.extract_subimage(char,bin,r.x0,r.y0,r.x1,r.y1)
            ocropy.div(char,ocropy.max(char))

            classifications = model.coutputs(char)
            classifications.sort(key=lambda x:-x[1])
            for k,v in classifications:
                if k=="~":
                    reject_p = v
                    break
            cost = -log(reject_p)
            cost = min(cost,maxcost)

            remaining = classifications[:]
            remaining.remove(("~",reject_p))
            cls,p = remaining[0]

            cat = ocropy.size_category(cls)
            sizes[cat] = sizes.get(cat,[])+[rh]

            if cls in """.:;,"'Il|[]()\\/-~i""": continue

            print r.x0,r.y0,r.x1,r.y1,cls
            axis.text(r.x0,h-r.y0-1,cls,color="red")
            ocropy.fill_rect(costs,r.x0,r.y0,r.x1,r.y1,cost)

    show()

    clf()
    axis = subplot(111)
    axis.imshow(NI(costs),cmap=cm.gray)
    show()
    
