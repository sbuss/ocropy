#!/usr/bin/python

# imgr

import signal
signal.signal(signal.SIGINT,lambda *args:sys.exit(1))
import ocropy.gtkyield
from pylab import *
import sys,os,re,ocropy,optparse
from ocropy import N,NI
from scipy.ndimage import measurements
from scipy.misc import imsave
from PIL import Image

parser = optparse.OptionParser()
parser.add_option("-o","--output",help="output directory",default="book")
parser.add_option("-d","--display",help="display result",action="store_true")
parser.add_option("-D","--Display",help="display continuously",action="store_true")
parser.add_option("-T","--threshold",help="threshold (simple Sauvola if set)",default=-1,type=float)
parser.add_option("-L","--low",help="low threshold",default=0.1,type=float)
parser.add_option("-H","--high",help="high threshold",default=0.4,type=float)
parser.add_option("-W","--width",help="width parameter",default=40,type=float)
options,args = parser.parse_args()

if options.threshold>0:
    options.low = options.threshold
    options.high = options.threshold

binarizer = ocropy.make_IBinarize("StandardPreprocessing")
binarizer.pset("binarizer","BinarizeByHT")
binarizer.reinit()
binarizer.command("binarizer_pset","k0",str(options.low))
binarizer.command("binarizer_pset","k1",str(options.high))
binarizer.command("binarizer_pset","width",str(options.width))

if options.Display: options.display = 1
if options.display: ion(); show()

if os.path.exists(options.output):
    print options.output,"already exists; please remove"
    os.exit(0)

os.mkdir(options.output)

count = 1

for arg in args:
    print "# loading",arg
    image = ocropy.bytearray()
    ocropy.read_image_gray(image,arg)
    bin = ocropy.bytearray()
    gray = ocropy.bytearray()
    try:
        binarizer.binarize(bin,gray,image)
    except:
        print "# binarizer failed; skipping",arg
        continue
    if options.display: 
        clf()
        imshow(NI(bin),cmap=cm.gray)
        draw()
        if not options.Display: 
            raw_input("hit ENTER to continue")
        else:
            ginput(1,timeout=1)
    dest = "%s/%04d" % (options.output,count)
    print "# writing",dest
    ocropy.write_image_gray(dest+".png",gray)
    ocropy.write_image_gray(dest+".bin.png",bin)
    count += 1
