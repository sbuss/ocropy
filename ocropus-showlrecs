#!/usr/bin/env python

### FIXME
### -- replace comboboxes with file menu
### -- check for "path exists"
### -- add editors for ground truth

from optparse import OptionParser
import re,os,glob
import sys
import matplotlib 
matplotlib.use('GTK') 
from matplotlib.figure import Figure 
from matplotlib.axes import Subplot 
from matplotlib.backends.backend_gtk import FigureCanvasGTK, NavigationToolbar 
from numpy import arange,sin, pi 
import pygtk 
pygtk.require("2.0") 
import gtk 
import gtk.glade
import gobject
from pylab import *
import gnome
import ocropy
from ocropy import NI
from ocropy import fstutils
from matplotlib import patches
import scipy
import ocropus

default_model = "2m2-reject.cmodel"
default_segmenter = "DpSegmenter"
default_langmod = "*.gt.txt"

from matplotlib.backends.backend_gtk import FigureCanvasGTK as FigureCanvas
from matplotlib.backends.backend_gtk import NavigationToolbar2GTK as NavigationToolbar

#from matplotlib.backends.backend_gtkcairo import FigureCanvasGTKCairo as FigureCanvas
#from matplotlib.backends.backend_gtkcairo import NavigationToolbar2Cairo as NavigationToolbar
#from matplotlib.backends.backend_gtkagg import FigureCanvasGTKAgg as FigureCanvas
#from matplotlib.backends.backend_gtkagg import NavigationToolbar2GTKAgg as NavigationToolbar

parser = OptionParser(usage="""
%prog [options] line1.png line2.png ...

Interactively explore line recognition and line recognition errors.
""")
parser.add_option("-v","--verbose",help="verbose",action="store_true")
parser.add_option("-s","--spaces",help="count spaces",action="store_true")
parser.add_option("-c","--case",help="case sensitive",action="store_true")
parser.add_option("-B","--nbest",help="nbest chars",default=10,type="int")
parser.add_option("-M","--maxccost",help="maxcost for characters in recognizer",default=10.0,type="float")
parser.add_option("-b","--beam",help="beam width",default=1000,type="int")
parser.add_option("-R","--recognizer",help="line model",default=None)
parser.add_option("-L","--langmod",help="language model",default=None)
#parser.add_option("-C","--linerecognizer",help="class used for wrapping .cmodels",default="oldlinerec.LineRecognizer")
(options,args) = parser.parse_args()

if len(args)<1:
    parser.print_help()
    sys.exit(0)

iconwidth = 200
lscale = 1.0

def readfile(file):
    with open(file) as stream:
        return stream.read()


def edit_distance(s,t,use_space=0,case_sensitive=0):
    if not case_sensitive:
        s = s.upper()
        t = t.upper()
    if not use_space:
        s = re.sub(r'\s+','',s)
        t = re.sub(r'\s+','',t)
    s_ = ocropy.ustrg()
    s_.assign(s)
    t_ = ocropy.ustrg()
    t_.assign(t)
    return ocropy.edit_distance(s_,t_)

def gtk_yield():
    while gtk.events_pending():
       gtk.main_iteration(False)

def numpy2pixbuf(a):
    """Convert a numpy array to a pixbuf."""
    if len(a.shape)==3:
        data = zeros(list(a.shape),'B')
        data[:,:,:] = 255*a
        return gtk.gdk.pixbuf_new_from_array(data,gtk.gdk.COLORSPACE_RGB,8)
    elif len(a.shape)==2:
        data = zeros(list(a.shape)+[3],'B')
        data[:,:,0] = 255*a
        data[:,:,1] = 255*a
        data[:,:,2] = 255*a
        return gtk.gdk.pixbuf_new_from_array(data,gtk.gdk.COLORSPACE_RGB,8)

def get_icon(file,size=iconwidth):
    page_gray = ocropy.bytearray()
    ocropy.read_image_gray(page_gray,file)
    w = page_gray.dim(0)
    h = page_gray.dim(1)
    scale = max(w/size,h/size)
    scale = max(1.0,scale)
    icon_gray = ocropy.bytearray()
    ocropy.rescale(icon_gray,page_gray,int(w/scale),int(h/scale))
    page_gray.clear()
    icon = NI(icon_gray)
    icon_gray.clear()
    lo,hi = amin(icon),amax(icon)
    icon = (icon-lo)*1.0/(hi-lo)
    return numpy2pixbuf(icon)

def get_icon0(file,size=iconwidth):
    image = imread(file)
    h,w = image.shape[:2]
    scale = max(w/size,h/size)
    scale = max(1.0,scale)
    if scale>1.0:
        icon = scipy.ndimage.interpolation.zoom(image,(1.0/scale,1.0/scale,1.0))
        result = numpy2pixbuf(icon)
        del icon
    else:
        result = numpy2pixbuf(image)
    del image
    return result
    
def compute_component_combolist(widget,kind=None,dflt=None):
    """Compute the combolist from the current charlist."""
    combolist = gtk.ListStore(str)
    for n in ocropy.get_components(kind):
        if n==dflt: select = len(combolist)
        combolist.append([n])
    widget.set_model(combolist)
    widget.set_text_column(0)
    widget.set_active(select)

def float_sort(model,x,y,col):
    x = model[x][col]
    y = model[y][col]
    if y=="": return -1
    if x=="": return 1
    if float(x)<float(y): return -1
    if float(x)>float(y): return 1
    return 0    

def line_image(file):
    base,ext = ocropy.allsplitext(file)
    s = base+".bin.png"
    if os.path.exists(s): return s
    return file

def seg2pixbuf(rseg):
    rseg = NI(rseg)
    w,h = rseg.shape
    if 1:
        colors = zeros((w,h,3))
        colors[:,:,0] = sin(rseg)
        colors[:,:,1] = sin(9.3*rseg)
        colors[:,:,2] = sin(11.4*rseg)
        colors[:,:,:] /= sqrt(sum(colors**2,axis=2)[:,:,newaxis])
        colors = 127.0*colors+1.0
        colors = array(colors,'B')
    else:
        colors = zeros((10,10,3),'B')
    rseg = gtk.gdk.pixbuf_new_from_array(colors,gtk.gdk.COLORSPACE_RGB,8)
    return rseg

def make_fst(s):
    fst = ocropy.make_OcroFST()
    start = fst.newState()
    fst.setStart(start)
    for i in range(len(s)):
        c = ord(s[i])
        node = fst.newState()
        fst.addTransition(start,node,c,0.0,c)
        start = node
    fst.setAccept(start)
    return fst

class LineWindow: 
    def __init__(self): 
        self.file = None
        self.lmodel = None
        self.linerec = None
        
        gladefile = ocropy.findfile("ocropus-showlrecs.glade")
        self.windowname = "linerecs" 
        self.wtree = gtk.glade.XML(gladefile,self.windowname) 
        self.window = self.wtree.get_widget(self.windowname)
        dic = {
            "on_window1_destroy" : gtk.main_quit,
            "on_recognizer_changed" : self.recognizer_update,
            "on_segmenter_changed" : self.segmenter_update,
            "on_langmod_changed" : self.langmod_update,
            "on_run_recognizer_clicked" : self.run_recognizer,
            "on_record_clicked" : self.record,
            "on_linelist_row_activated" : self.linelist_row,
            }
        self.wtree.signal_autoconnect(dic)
        self.linelist = self.wtree.get_widget("linelist")
        self.lines = gtk.ListStore(str,str,str,gtk.gdk.Pixbuf,str,str,str,str,str,str)
        self.lines.set_sort_func(0,float_sort,0)
        self.lines.set_sort_func(1,float_sort,1)
        self.lines.set_sort_func(2,float_sort,2)
        self.lines.set_sort_func(7,float_sort,7)
        self.lines.set_sort_func(8,float_sort,8)
        self.lines.set_sort_func(9,float_sort,9)
        self.linelist.set_model(self.lines)
        self.setupTreeView()
        self.details = self.wtree.get_widget("details")

        self.recognizers = gtk.ListStore(str)
        self.recognizers.append(["none"])
        models = glob.glob("*.model")
        models.sort()
        for model in models:
            self.recognizers.append([model])
        models = glob.glob("*.cmodel")
        models.sort()
        for model in models:
            self.recognizers.append([model])
        self.recognizer = self.wtree.get_widget("recognizer")
        self.recognizer.set_model(self.recognizers)
        self.recognizer.set_text_column(0)
        for i in range(len(self.recognizers)):
            if self.recognizers[i][0]==default_model:
                self.recognizer.set_active(i)
                break

        self.segmenters = gtk.ListStore(str)
        cl = ocropy.ComponentList()
        for i in range(cl.length()):
            if cl.kind(i)!="ISegmentLine": continue
            name = " "+cl.name(i); name = name[1:]
            print name
            self.segmenters.append([name])
        print [self.segmenters[i][0] for i in range(len(self.segmenters))]
        self.segmenter = self.wtree.get_widget("segmenter")
        self.segmenter.set_model(self.segmenters)
        self.segmenter.set_text_column(0)
        for i in range(len(self.segmenters)):
            if self.segmenters[i][0]==default_segmenter:
                self.segmenter.set_active(i)
                break

        active = 0
        index = 0
        self.langmods = gtk.ListStore(str)
        self.langmods.append(["none"])
        self.langmods.append(["*.txt"])
        self.langmods.append(["*.gt.txt"])
        for model in glob.glob("*.fst"):
            self.langmods.append([model])
        self.langmod = self.wtree.get_widget("langmod")
        self.langmod.set_model(self.langmods)
        self.langmod.set_text_column(0)
        for i in range(len(self.langmods)):
            if self.langmods[i][0]==default_langmod:
                self.langmod.set_active(i)
                break

        self.last_recognizer = None
        self.last_langmod = None
        self.window.show_all()
    def setupTreeView(self):
        headers = ["Errs","Last","Delta","Line","Output","True","File","Cost","GT-Cost","LM-Cost"]
        types = ["text","text","text","pixbuf","text","text","text","text","text","text"]
        for i in range(len(headers)):
            if types[i]=="pixbuf":
                renderer = gtk.CellRendererPixbuf()
                col = gtk.TreeViewColumn(headers[i],renderer,pixbuf=i)
                col.pack_start(renderer)
            else:
                renderer = gtk.CellRendererText()
                col = gtk.TreeViewColumn(headers[i],renderer,text=i)
                col.pack_start(renderer)
            col.set_sort_column_id(i)
            self.linelist.append_column(col)
        self.linelist.show()
    def addImages(self,images):
        """Set the store for the target class."""
        for image in images:
            pixbuf = gtk.gdk.pixbuf_new_from_file(line_image(image))
            w = pixbuf.get_width()
            h = pixbuf.get_height()
            scale = max(w/500.0,h/20.0)
            if scale>1:
                pixbuf = pixbuf.scale_simple(int(w/scale),int(h/scale),gtk.gdk.INTERP_BILINEAR)
            gt = ""
            gtfile = re.sub(r'\.png$',".gt.txt",image)
            if os.path.exists(gtfile): gt = readfile(gtfile)
            row = ["","","",pixbuf,"",gt,image,"","",""]
            self.lines.append(row)
        print row
        self.linelist.set_model(self.lines)
    def recognizeAll(self):
        if self.linerec is None: return
        print len(self.lines),"lines"
        for i in range(len(self.lines)):
            self.lines[i][4] = ""
        for i in range(len(self.lines)):
            file = self.lines[i][6]
            print file
            image = ocropy.bytearray()
            ocropy.read_image_gray(image,line_image(file))
            fst = ocropy.make_OcroFST()
            self.linerec.recognizeLine(fst,image)

            lmodel = None
            if type(self.lmodel) is str:
                gt = re.sub(r'\.[^/]*$',self.lmodel[1:],file)
                if os.path.exists(gt):
                    print "loading",gt
                    lmodel = fstutils.load_text_file_as_fst(gt)
                print "done"
            elif self.lmodel is not None:
                lmodel = self.lmodel

            s = ocropy.ustrg()
            if lmodel is not None:
                print "lmodel",lmodel
                cost = ocropy.beam_search(s,fst,lmodel,options.beam)
                self.lines[i][7] = cost
            else:
                fst.bestpath(s)

            result = ocropy.ustrg_as_string(s)
            gt = self.lines[i][5]
            if gt!="" and gt is not None:
                err = edit_distance(result,gt,
                                    use_space=options.spaces,
                                    case_sensitive=options.case)
                self.lines[i][0] = err
                if self.lines[i][1]!="":
                    self.lines[i][2] = float(self.lines[i][0])-float(self.lines[i][1])
                # ground truth cost
                gt_fst = make_fst(gt)
                cost2 = ocropy.beam_search(s,fst,gt_fst,options.beam)
                self.lines[i][8] = cost2
                # language model cost
                if self.lmodel is not None:
                    cost3 = ocropy.beam_search(s,gt_fst,lmodel,options.beam)
                    self.lines[i][9] = cost3
            print result
            self.lines[i][4] = result
            gtk_yield()
    def record(self,*args):
        for i in range(len(self.lines)):
            self.lines[i][1] = self.lines[i][0]
    def detail(self,*args):
        for arg in args:
            self.buffer.insert(self.buffer.get_end_iter(),arg)
    def detail_pixbuf(self,pixbuf,scale=1.0):
        if scale!=1.0:
            w = pixbuf.get_width()
            h = pixbuf.get_height()
            pixbuf = pixbuf.scale_simple(int(w*scale),int(h*scale),
                                         gtk.gdk.INTERP_BILINEAR)
        self.buffer.insert_pixbuf(self.buffer.get_end_iter(),pixbuf)
    def linelist_row(self,view,index,column):
        self.buffer = gtk.TextBuffer()
        self.details.set_buffer(self.buffer)
        if self.linerec is None:
            self.detail("(You need to load a recognizer first.)")
            return
        row = self.lines[index]
        file = row[6]
        base,_ = ocropy.allsplitext(file)
        self.detail(file+"\n\n")
        self.detail_pixbuf(gtk.gdk.pixbuf_new_from_file(line_image(file)),lscale)
        self.detail("\n\n")
        print "# recognizing line"
        image = ocropy.bytearray()
        ocropy.read_image_gray(image,line_image(file))
        fst = ocropy.make_OcroFST()
        rseg = ocropy.intarray()
        self.linerec.recognizeLineSeg(fst,rseg,image)
        s = ocropy.ustrg()
        fst.bestpath(s)
        result = ocropy.ustrg_as_string(s)
        self.detail("raw output: %s\n\n"%result)
        gt = row[5]
        lmodel = None
        if type(self.lmodel)==str:
            gtfile = re.sub(r'\.[^/]*$',self.lmodel[1:],file)
            lmodel = fstutils.load_text_file_as_fst(gtfile)
            print "loaded",gt,"as",lmodel
        elif self.lmodel is not None:
            lmodel = self.lmodel
        if lmodel is not None:
            print "# beam search, width:",options.beam
            cost = ocropy.beam_search(s,fst,lmodel,options.beam)
            result = ocropy.ustrg_as_string(s)
            self.detail("cost: %f\n\n"%cost)
            self.detail("output: %s\n\n"%result)
        else:
            self.detail("(load a language model for more details)\n")
        if gt is not None and gt!="":
            print "# edit distance"
            err = edit_distance(result,gt,
                                use_space=options.spaces,
                                case_sensitive=options.case)
            self.detail("ground truth: %s\n\n"%gt)
            self.detail("error: %f\n\n"%err)
            fst2 = make_fst(gt)
            cost2 = ocropy.beam_search(s,fst,fst2,options.beam)
            self.detail("gt cost: %f\n\n"%cost2)
        if gt is not None and self.lmodel is not None:
            fst3 = make_fst(gt)
            cost3 = ocropy.beam_search(s,fst3,lmodel,options.beam)
            self.detail("lmodel cost: %f\n\n"%cost3)
        gtk_yield()
        self.detail("\n")
        self.detail("\nraw segmentation\n")
        colors = seg2pixbuf(rseg)
        self.detail_pixbuf(colors,lscale)
        self.detail("\n")
        if lmodel is not None:
            print "# alignment"
            self.detail("\naligned segmentation\n")
            l = ocropy.compute_alignment(fst,rseg,lmodel,beam=options.beam)
            result = l.output
            cseg = l.cseg
            costs = l.costs
            if cseg is None:
                self.detail("(no cseg)\n")
            else:
                colors = seg2pixbuf(cseg)
                self.detail_pixbuf(colors,lscale)
                self.detail("\n")
                self.detail("\nper-character results\n")
                grouper = ocropy.make_IGrouper("SimpleGrouper")
                grouper.pset("maxrange",1)
                grouper.pset("maxdist",1)
                ocropy.make_line_segmentation_black(cseg)
                grouper.setSegmentation(cseg)
                for i in range(grouper.length()):
                    try:
                        if result[i]==' ': continue
                        raw = ocropy.bytearray()
                        mask = ocropy.bytearray()
                        grouper.extractWithMask(raw,mask,image,i,1)
                        img = 1.0-NI(mask)/255.0
                        self.detail_pixbuf(numpy2pixbuf(img))
                        self.detail(" [%s]   "%result[i])
                        if (i+1)%10==0: self.detail("\n")
                    except:
                        self.detail(" [oops]   ")
                self.detail("\n")
        else:
            self.detail("(load a language model for per-character alignments)")
        if hasattr(self.linerec,"chars"):
            print "# per char output"
            self.detail("\n")
            self.detail("=====================\n")
            self.detail("per character results\n")
            self.detail("=====================\n")
            self.detail("\n")
            for c in self.linerec.chars:
                self.detail("%3d   "%c.index)
                self.detail_pixbuf(numpy2pixbuf(amax(c.image)-c.image))
                self.detail("\t\t")
                for s,v in c.outputs:
                    self.detail("%-3s %.2f   "%(s,v))
                self.detail("\n")
    def recognizer_update(self,*args):
        file = self.recognizer.get_active_text()
        self.recognizer_load(file)
    def segmenter_update(self,*args):
        name = self.segmenter.get_active_text()
        comp = ocropy.make_ISegmentLine(name)
        self.linerec.segmenter = comp
        print "set segmenter to",name,comp
    def recognizer_load(self,file):
        if file!="none":
            if 0 and ".cmodel" in file:
                cmodel = ocropy.load_IModel(file)
                constructor = eval(options.linerecognizer)
                self.linerec = constructor(cmodel=cmodel,
                                           best=options.nbest,
                                           maxcost=options.maxccost)
            else:
                self.linerec = ocropy.load_linerec(file)
        # self.linerec.debug = 1
        print "loaded",self.linerec
        self.segmenter_update()
    def langmod_update(self,*args):
        lmodel_name = self.langmod.get_active_text()
        self.langmod_load(lmodel_name)
    def langmod_load(self,lmodel_name):
        lmodel = None
        if lmodel_name[0]=="*":
            lmodel = lmodel_name
        elif lmodel_name!="none":
            lmodel = ocropy.make_OcroFST()
            lmodel.load(lmodel_name)
        self.lmodel = lmodel
        print "loaded",self.lmodel
    def run_recognizer(self,*args):
        print "run_recognizer_activate",args
        recognizer = self.recognizer.get_active_text()
        langmod = self.langmod.get_active_text()
        if recognizer=="none": return
        if recognizer==self.last_recognizer and \
                langmod==self.last_langmod: return
        self.recognizeAll()


def main():
    app = LineWindow()
    app.addImages(args)
    if options.langmod is not None:
        app.langmod_load(options.langmod)
        app.langmod.append_text(options.langmod)
    if options.recognizer is not None:
        app.recognizer_load(options.recognizer)
        app.recognizer.append_text(options.recognizer)
    gtk.main()

main()
