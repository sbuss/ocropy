#!/usr/bin/python

import sys,os,re,glob
import ocropy
from ocropy import N,NI,plotutils
from pylab import *

from optparse import OptionParser
prefix = "/usr/local/share/ocropus/models/"
parser = OptionParser(usage="""
%prog [options] image.png ...

Recognize models using OCRopus line recognizers.

For each input image, it reads image.png and image.bin.png, if it exists.
It produces the following output files:

* image.fst -- recognition lattice
* image.txt -- recognized output, combining the language model and recognition lattice

You can get a quick idea of how recognition is working by using the -d or -D arguments.
""")
parser.add_option("-m","--linerec",help="linerec model",default=prefix+"default.model")
parser.add_option("-l","--langmod",help="language model",default=prefix+"default.fst")
parser.add_option("-w","--lweight",help="language model weight",default=1.0,type=float)
parser.add_option("-v","--verbose",help="verbose",action="store_true")
parser.add_option("-d","--display",help="display result",action="store_true")
parser.add_option("-D","--Display",help="display continuously",action="store_true")
(options,args) = parser.parse_args()

assert options.lweight==1.0,"other language model weights not implemented yet"

if options.Display: options.display = 1
if options.display: ion()

linerec = ocropy.load_IRecognizeLine(options.linerec)
lmodel = ocropy.make_OcroFST()
lmodel.load(options.langmod)

for line in args:
    image = ocropy.bytearray()
    ocropy.read_image_gray(image,line)
    l = ocropy.recognize_and_align(image,linerec,lmodel)
    print "%6.2f\t%3d\t%s"%(l.cost,len(l.output),l.output)
    base,_ = ocropy.allsplitext(line)

    with open(base+".txt","w") as stream:
        stream.write(l.output)
    l.lattice.save(base+".fst")
    ocropy.write_line_segmentation(base+".rseg.png",l.rseg)
    ocropy.write_line_segmentation(base+".cseg.png",l.rseg)

    if options.display:
        clf()
        axis = subplot(111)
        plotutils.draw_aligned(l,axis)
        if not options.Display: 
            raw_input("hit ENTER to continue")
        else:
            ginput(1,timeout=1)
