#!/usr/bin/python

import sys,os,re,glob
import ocropy
from ocropy import N,NI

import matplotlib
matplotlib.use('GTK')
import pygtk,gtk,gtk.glade,gobject
pygtk.require("2.0")
from matplotlib import patches,pyplot
from matplotlib.figure import Figure 
from matplotlib.axes import Subplot 
from matplotlib.backends.backend_gtk import FigureCanvasGTK, NavigationToolbar
from pylab import *

from optparse import OptionParser
prefix = "/usr/local/share/ocropus/models/"
parser = OptionParser(usage="""
%prog [options] image.png ...

Recognize models using the OCRopus C++ line recognizer (IRecognizeLine)
""")
parser.add_option("-m","--linerec",help="linerec model",default=prefix+"default.model")
parser.add_option("-l","--langmod",help="langmod",default=prefix+"default.fst")
parser.add_option("-v","--verbose",help="verbose",action="store_true")
parser.add_option("-d","--display",help="display result",action="store_true")
parser.add_option("-D","--Display",help="display continuously",action="store_true")
(options,args) = parser.parse_args()

if options.Display:
    options.display = 1
    import matplotlib 
    matplotlib.use('GTK') 
    import gtk
    def gtk_yield():
        while gtk.events_pending():
           gtk.main_iteration(False)
    ion()

linerec = ocropy.load_IRecognizeLine(options.linerec)
lmodel = ocropy.make_OcroFST()
lmodel.load(options.langmod)

for line in args:
    image = ocropy.bytearray()
    ocropy.read_image_gray(image,line)
    fst = ocropy.make_OcroFST()
    rseg = ocropy.intarray()
    linerec.recognizeLine(rseg,fst,image)
    s = ocropy.ustrg()
    cost = ocropy.beam_search(s,fst,lmodel,1000)
    print "%6.2f\t%3d\t%s"%(cost,s.length(),ocropy.ustrg_as_string(s))
    if options.display:
        clf()
        axis = subplot(111)
        axis.imshow(NI(image),cmap=cm.gray)
        result,cseg,costs = ocropy.compute_alignment(fst,rseg,lmodel)
        ocropy.make_line_segmentation_black(cseg)
        ocropy.renumber_labels(cseg,1)
        bboxes = ocropy.rectarray()
        ocropy.bounding_boxes(bboxes,cseg)
        s = re.sub(r'\s+','',result)
        h = image.dim(1)
        for i in range(1,bboxes.length()):
            axis.text(bboxes.at(i).x0,h-bboxes.at(i).y0-1,s[i-1],
                      color="red",weight="bold",fontsize=14,alpha=0.3)
        if options.Display:
            draw(); gtk_yield();
            waitforbuttonpress()
        else:
            show()
