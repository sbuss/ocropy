#!/usr/bin/python

# imgr

import signal
signal.signal(signal.SIGINT,lambda *args:sys.exit(1))
from pylab import *
import sys,os,re,ocropy,optparse
from ocropy import N,NI
from scipy.ndimage import measurements
from scipy.misc import imsave
from PIL import Image

parser = optparse.OptionParser(usage="""
""")
parser.add_option("-d","--display",help="display result",action="store_true")
parser.add_option("-D","--Display",help="display continuously",action="store_true")
parser.add_option("-r","--dpi",help="resolution in DPI",type=float,default=200.0)
options,args = parser.parse_args()

min_px = (8.0*options.dpi/72.0) / 3.0

binarizer = ocropy.make_IBinarize("BinarizeBySauvola")

if options.Display: options.display = 1
if options.display: ion(); show()

count = 1

for image,arg in ocropy.page_iterator(args):
    print
    print "===",arg,"==="
    print

    w,h = (image.dim(0),image.dim(1))

    if options.display: 
        clf(); imshow(NI(image),cmap=cm.gray); draw()
        ginput(1,timeout=1)

    bin = ocropy.bytearray()
    gray = ocropy.bytearray()
    temp = ocropy.bytearray()

    result = ocropy.bytearray(image.dim(0),image.dim(1))
    result.fill(0)

    # binarize with a really low threshold

    print "# finding rectangles"

    binarizer.pset("k",0.05)
    binarizer.pset("w",500)
    binarizer.binarize(bin,gray,image)

    temp.copy(bin)
    ocropy.binary_invert(temp)
    ocropy.binary_open_rect(temp,20,20)
    ocropy.binary_close_rect(temp,30,30)
    components = ocropy.intarray()
    components.copy(temp)
    n = ocropy.label_components(components)
    # imshow(NI(components)); draw(); ginput(1)
    boxes = ocropy.rectarray()
    ocropy.bounding_boxes(boxes,components)
    cover = zeros((w,h),'B')
    for i in range(1,boxes.length()):
        if boxes.at(i).width()<50 and boxes.at(i).height()<50: continue
        x0,y0,x1,y1 = (boxes.at(i).x0,boxes.at(i).y0,boxes.at(i).x1,boxes.at(i).y1)
        print x0,y0,x1,y1
        cover[x0:x1,y0:y1] = 255
    ocropy.narray_of_numpy(result,cover)

    clf(); imshow(NI(result)); draw(); ginput(1)

    # binarize with a normal threshold

    print "# finding h/v lines"

    binarizer.pset("k",0.40)
    binarizer.pset("w",200)
    binarizer.binarize(bin,gray,image)

    # find extended horizontal lines

    temp.copy(bin)
    ocropy.binary_invert(temp)
    ocropy.binary_dilate_rect(temp,3,7)
    ocropy.binary_open_rect(temp,100,1)
    ocropy.max(result,temp)

    # find extended vertical lines

    temp.copy(bin)
    ocropy.binary_invert(temp)
    ocropy.binary_dilate_rect(temp,7,3)
    ocropy.binary_open_rect(temp,1,100)
    ocropy.max(result,temp)

    # find halftone regions

    clf(); imshow(NI(result),cmap=cm.gray); draw(); ginput(1)
    continue


    if options.display: 
        clf(); imshow(NI(bin),cmap=cm.gray); draw()
        if not options.Display: 
            raw_input("hit ENTER to continue")
        else:
            ginput(1,timeout=1)
    count += 1
