#!/usr/bin/python

import sys,os,re,glob,math,glob,signal,cPickle
import iulib,ocropus
import ocropy
from ocropy import utils
from pylab import *
from ocropy.fgen import *
from optparse import OptionParser
from ocropy import dbtables

class unif:
    def __init__(self,lo,hi):
        self.lo = lo
        self.hi = hi
    def __call__(self):
        return rand()*(self.hi-self.lo)+self.lo
class bn:
    def __init__(self,m,s):
        self.m = m
        self.s = s
    def __call__(self):
        while 1:
            x = randn()
            if x>-2 and x<2: break
        return x*self.s+self.m
class c:
    def __init__(self,c):
        self.c = c
    def __call__(self):
        return self.c

scale = unif(1.0,4.0)
aspect = unif(0.9,1.1)
margin = unif(0.0,2.0)
noise = unif(0.0,0.1)
maxdelta = unif(0.0,2.0)
rotation = unif(-4.0,4.0) # in degrees
inner = c(1.0)

parser = OptionParser("""
usage: %prog [options] ...

Generates characters from TrueType fonts and stores them in a character database.
""")
parser.add_option("-o","--output",help="output file",default="chars.db")
parser.add_option("-D","--display",help="display chars",action="store_true")
parser.add_option("-R","--record",help="record parameter info in database",action="store_true")
parser.add_option("-v","--verbose",help="verbose output",action="store_true")
parser.add_option("-c","--classes",help="list of classes (one per line)",default=None)
parser.add_option("-s","--sizes",help="list of sizes (Python expression)",default="range(26,36)")
parser.add_option("-f","--specs",help="list of font specs",default=None)
parser.add_option("-n","--nvariants",help="number of variants",default=4,type=int)
parser.add_option("-Q","--parallel",help="number of parallel processes",default=4,type=int)
parser.add_option("-e","--eval",help="evaluate expressions (for additional options)",default="None")
parser.add_option("-i","--inner",help="inner offset for degradation (<1: some broken chars)",default=1,type=float)
(options,args) = parser.parse_args()

exec options.eval

if options.classes is not None:
    testset = []
    with open(options.classes,"r") as stream:
        for line in stream.readlines():
            line = line[:-1]
            testset.append(line)
else:
    testset = sorted(list(set([chr(c) for c in range(33,127)])-set(["~","_","#"])))
n = len(testset)

sizes = eval(options.sizes)

if options.specs is not None:
    specs = []
    with open(options.specs,"r") as stream:
        for line in stream.readlines():
            line = line[:-1]
            specs.append(line)
else:
    families = ['DejaVu Sans', 'DejaVu Sans Mono', 'DejaVu Serif', 'FreeMono', 'FreeSans', 'FreeSerif', 'cmr10']
    styles = [ '', ' italic', ' bold' ]
    specs = []
    for family in families:
        for style in styles:
            specs.append(family+style)
    print specs

# quick run-through to make sure all the fonts exist
for spec in specs:
    pango_render_string("hello",spec=spec,size=30,pad=10,markup=0)

if os.path.exists(options.output):
    print options.output,"exists; please remove"
    sys.exit(1)

table = dbtables.Table(options.output,"chars")
table.converter("image",dbtables.SmallImage())
table.create(image="blob",cls="text",file="text",segid="integer",bbox="text",count="integer",classes="text")
table.commit()
del table
table = None

if options.display: ion(); show(); gray()
jobs = []
for spec in specs:
    for size in sizes:
        inputs = []
        jobs.append((spec,size))

def process_arg(arg):
    table = dbtables.Table(options.output,"chars")
    table.converter("image",dbtables.SmallImage())
    spec,size = arg
    print "loading",spec,size
    total = 0
    for d in range(options.nvariants):
        for i in range(n):
            c = testset[i]
            scl = scale()
            asp = aspect()
            rot = rotation()
            image = pango_render_string(c,spec=spec,size=size,pad=10,markup=0,scale=scl,aspect=asp,rotation=rot)
            image = average(image,axis=2)
            image = array(image,'f')
            image /= amax(image)
            mrg = margin()
            nse = noise()
            inn = inner()
            image = gauss_degrade(image,margin=mrg,noise=nse,inner=inn)
            mdl = maxdelta()
            image = gauss_distort([image],maxdelta=mdl)[0]
            raw = array(image*255,'B')
            if options.record:
                css = "s%ds%.2fa%.2fm%.2fn%.2fm%.2fi%.2fr%.2f"%(size,scl,asp,mrg,nse,mdl,inn,rot)
                table.set(image=raw,cls=c,count=1,classes=css)
            else:
                table.set(image=raw,cls=c,count=1)
            total += 1
            if total%1000==0: table.commit()
    table.commit()
    sys.stdout.flush()
    return None

from multiprocessing import Pool

if options.parallel>1:
    pool = Pool(processes=options.parallel)
    result = pool.map(process_arg,jobs)
else:
    for arg in jobs:
        process_arg(arg)

import objgraph
objgraph.show_most_common_types(limit=50)
