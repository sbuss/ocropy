#!/usr/bin/env python
import sys
import matplotlib 
matplotlib.use('GTK') 
from matplotlib.figure import Figure 
from matplotlib.axes import Subplot 
from matplotlib.backends.backend_gtk import FigureCanvasGTK, NavigationToolbar 
from numpy import arange,sin, pi 
import pygtk 
pygtk.require("2.0") 
import gtk 
import gtk.glade 
from pylab import *
import gnome
import ocropy
from ocropy import NI
from matplotlib import patches

preproc = ocropy.make_IBinarize("StandardPreprocessing")
segmenter = ocropy.make_ISegmentPage("SegmentPageByRAST")

def gtk_yield():
    while gtk.events_pending():
       gtk.main_iteration(False)

class GraphWindow: 
    def make_figure(self,where):
        # setup matplotlib stuff on first notebook page (empty graph) 
        figure = Figure(figsize=(6,4), dpi=72)
        axis = figure.add_subplot(111)
        canvas = FigureCanvasGTK(figure) 
        canvas.show()         
        viewport = self.wtree.get_widget(where)
        print "viewport",viewport
        viewport.add(canvas)        
        return axis
    def __init__(self): 
        gladefile = "ocroshow-pagesegs.glade" 
        self.windowname = "pagesegs" 
        self.wtree = gtk.glade.XML(gladefile, self.windowname) 
        self.window = self.wtree.get_widget(self.windowname)
        dic = {"on_window1_destroy" : gtk.main_quit, 
            }
        self.notebook = self.wtree.get_widget("notebook")
        self.wtree.signal_autoconnect(dic)
        self.segmentation_axis = self.make_figure("segmentation_container")
        self.cleanup_axis = self.make_figure("cleanup_container")
        self.raw_axis = self.make_figure("raw_container")
        self.window.show_all()
        self.show("testpage.png")
    def show(self, file):
        # load the image
        page_gray = ocropy.bytearray()
        ocropy.read_image_gray(page_gray,file)
        self.raw_axis.cla()
        self.notebook.set_current_page(2); gtk_yield()
        self.raw_axis.imshow(NI(page_gray),cmap=cm.gray); gtk_yield()
        
        # clean it up using the given cleanup method
        self.cleanup_axis.cla()
        page_bin = ocropy.bytearray()
        preproc.binarize(page_bin,page_gray)
        self.cleanup_axis.imshow(NI(page_bin),cmap=cm.gray)
        self.notebook.set_current_page(1); gtk_yield()
        
        # perform segmentation
        page_seg = ocropy.intarray()
        segmenter.segment(page_seg,page_bin)      
        self.segmentation_axis.cla()
        self.segmentation_axis.imshow(NI(page_bin),cmap=cm.gray)
        regions = ocropy.RegionExtractor()
        regions.setPageLines(page_seg)
        print "lines:",regions.length()
        h = page_seg.dim(1)
        for i in range(1,regions.length()):
            x0 = regions.x0(i)
            y0 = regions.y0(i)
            x1 = regions.x1(i)
            y1 = regions.y1(i)
            p = patches.Rectangle((x0,h-y1-1),x1-x0,y1-y0,edgecolor="red",fill=0)
            self.segmentation_axis.add_patch(p)
        self.notebook.set_current_page(0); gtk_yield()
def main():
    app = GraphWindow()
    gtk.main()

main()
